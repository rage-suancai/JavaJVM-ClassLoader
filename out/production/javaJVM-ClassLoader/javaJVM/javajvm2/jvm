字节码指令
虚拟机的指令是由一个字节长度的 代表某种特定操作含义的数字(操作码 类似于机器语言)操作后面也可以携带0个或多个参数一起执行
我们前面已经介绍过了 JVM实际上并不是面向寄存器架构的 而是面向操作数栈 所以大多数指令都是不带参数的

由于之前已经讲解过大致运行流程 这里我们就以当前的Main类中的main方法作为教材进行讲解:
                    public static void main(String[] args) {

                        int i = 10;
                        int a = i++;
                        int b = ++i;

                    }

可以看到 main方法中首先是定义了一个int类型的变量i 并赋值为10 然后变量a接收i++的值 变量b接收++i的值

那么我们来看看编译成字节码之后 是什么样的:
    > 首先第一句 bipush 将10送至操作数栈顶
    > 接下来将操作数栈顶的数值存进1号本地变量 也就是变量i中
    > 接着将变量i中的值又丢向操作数栈顶
    > 这里使用iinc指令 将1号本地变量的值增加1(结束之后i的值就是11了)
    > 接着将操作数栈顶的值(操作数栈顶的值是10)存入2号本地变量 (这下彻底知道i++到底干了啥才会先返回后自增了吧 从原理角度来说 实际上i是先自增了的 但由于这里取的是操作数栈中的值 所以说就得到了i之前的值)
    > 接着往下 我们看到++i是先直接将i的值自增1
    > 然后在将其值推向操作数栈顶

                    首先10被送进操作数栈           接着被存入1号本地变量            将1号本地变量的值丢进操作数栈            1号本地变量值自增
                    本地变量表|操作数栈            本地变量表|操作数栈               本地变量表 |  操作数栈               本地变量表|操作数栈
                     int i; | [10]              int i;10|                      int i;10 |   [10]                int i;11|
                     int a; |         --------> int a;  |          -------->   int a;   |             --------> int a;10|
                     int b; |                   int b;  |                      int b;   |                       int b;  |
                            |                           |                               |                               |

而从结果来看 i++操作确实是先返回再自增的 而字节码指令层面来说 却是截然相反的 只是结果一致罢了